// ------------------------------------------------------------
// Lead Reloading Bot
// ------------------------------------------------------------
class LeadReloadingThingy:HDWeapon{
	int shells;
	bool makinground;
	bool roundmade;
	override void beginplay(){
		super.beginplay();
		shells=0;makinground=false;roundmade=false;
	}

	override void actualpickup(actor other,bool silent){
		super.actualpickup(other,silent);
		if(!other)return;
			shells;
		while(shells>0){
			shells--;
			if(other.A_JumpIfInventory("HDShellAmmo",0,"null"))
				other.A_SpawnItemEx("HDShellAmmo",0,0,owner.height-16,2,0,1);
			else HDF.Give(other,"HDShellAmmo",1);
		}
		if(roundmade==true){
			//HDF.Give(self,"HDBallAmmo",1);
			owner.A_GiveInventory("HDBallAmmo",1);
			roundmade=false;
			}
	}
	void A_Chug(){
		A_StartSound("roundmaker/chug1",8);
		A_StartSound("roundmaker/chug2",9);
		vel.xy+=(frandom(-0.1,0.1),frandom(-0.1,0.1));
		if(floorz>=pos.z)vel.z+=frandom(0,1);
	}
	void A_MakeRound(){
		if(shells<4){
			makinground=false;
			setstatelabel("spawn");
			return;
		}
		shells-=4;
		A_StartSound("roundmaker/pop",4);
		if(!random(0,63)){
			A_SpawnItemEx("HDExplosion");
			A_Explode(32,32);
		}else {roundmade=true;} //this is bc rounds are a bitch to find, also i dont imagine these ancient fuckers have any concept of springs so
	}
	action void A_CheckChug(bool anyotherconditions=true){
		if(
			anyotherconditions
			&&countinv("HDShellAmmo")>=4
		){
			invoker.makinground=true;
			int counter=min(4,countinv("HDShellAmmo"));
			invoker.shells=counter;A_TakeInventory("HDShellAmmo",counter);
			dropinventory(invoker);
		}
	}
	states{
	chug:
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3{invoker.A_Chug();}
		---- A 10{invoker.A_MakeRound();}
		---- A 0 A_Jump(256,"spawn");
	}
}
/*class LeadReloader:LeadReloadingThingy{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "7.76mm Auto-Reloader"
		//$Sprite "RLDRA0"

		+weapon.wimpy_weapon
		+inventory.invbar
		+hdweapon.fitsinbackpack
		inventory.pickupsound "misc/w_pkup";
		inventory.pickupmessage "You got the lead ball creation machine!";
		scale 0.5;
		hdweapon.refid HDLD_776RL;
		tag "Lead Ball Creation device";
	}
	override double gunmass(){return 0;}
	override double weaponbulk(){
		return 20*amount;
	}
	override string,double getpickupsprite(){return "RLDRA0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		vector2 bob=hpl.hudbob*0.3;
		int 
		=hpl.countinv("HDShellAmmo");
		int fourm=hpl.countinv("FourMilAmmo");
		double lph=(brass&&fourm>=4)?1.:0.6;
		sb.drawimage("RLDRA0",(0,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER,
			alpha:lph,scale:(2,2)
		);
		sb.drawimage("SHELA0",(-30,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER|sb.DI_ITEM_RIGHT,
			alpha:lph,scale:(2.5,2.5)
		);
		sb.drawimage("CLIPA0",(30,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER|sb.DI_ITEM_LEFT,
			alpha:lph,scale:(1.9,4.7)
		);
		sb.drawstring(
			sb.psmallfont,""..brass,(-30,-54)+bob,
			sb.DI_TEXT_ALIGN_RIGHT|sb.DI_SCREEN_CENTER_BOTTOM,
			fourm?Font.CR_GOLD:Font.CR_DARKGRAY,alpha:lph
		);
		sb.drawstring(
			sb.psmallfont,""..fourm,(30,-54)+bob,
			sb.DI_TEXT_ALIGN_LEFT|sb.DI_SCREEN_CENTER_BOTTOM,
			fourm?Font.CR_LIGHTBLUE:Font.CR_DARKGRAY,alpha:lph
		);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."+"..WEPHELP_ALTFIRE.."  load powder\n"
		..WEPHELP_RELOAD.."+"..WEPHELP_FIRE.."  load ball\n"
		..WEPHELP_ALTRELOAD.."+"..WEPHELP_FIRE.."  Ram rod down barrel\n"
		..WEPHELP_ALTFIRE.."  Cock hammer\n"
		..WEPHELP_FIREMODE.."  Bayonet Stab, hold to charge\n"
		..WEPHELP_UNLOAD.."  Assemble rounds"
		;
		//..WEPHELP_USE.."+"..WEPHELP_UNLOAD.."  Assemble rounds" this may return
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	states{
	select0:
		TNT1 A 0 A_Raise(999);
		wait;
	deselect0:
		TNT1 A 0 A_Lower(999);
		wait;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		goto readyend;
	fire:
		TNT1 A 0 A_CheckChug();
		goto ready;
	hold:
		TNT1 A 1;
		TNT1 A 0 A_Refire("hold");
		goto ready;
	user4:
	unload:
		TNT1 A 1 A_CheckChug(pressinguse());
		goto ready;
	spawn:
		RLDR A -1 nodelay A_JumpIf(
			invoker.makinground
			&&invoker.shells>=3,
		"chug");
		stop;
	}
}
*/
const HDLD_MUSKET="mus";
////////////////////////////////////
// LORE GOES HERE
////////////////////////////////////
class HD_Musket:LeadReloadingThingy{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Musket"
		//$Sprite "MSKTA0"
		weapon.selectionorder 300;
		weapon.slotnumber 5;
		weapon.slotpriority 3;
		weapon.kickback 100;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		inventory.pickupmessage "You got the Musket! Isn't this thing a bit... old?";
		obituary "%o caught %k's ball.";
		hdweapon.barrelsize 24,1,2;
		tag "Musket";
		hdweapon.refid HDLD_MUSKET;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(MUSKT_HEAT,12); //was 12
	}
	override void beginplay(){
		super.beginplay();
	}
	override double gunmass(){
		double amt=weaponstatus[MUSKT_BALLLOADED];
		return 6+amt*amt;
	}
	override double weaponbulk(){
		return 130;//+(weaponstatus[MUSKT_BALLLOADED]=2?ENC_BALL_LOADED:0);
	}
	override string,double getpickupsprite(){return "MSKTA0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("BALLA0",(-48,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.7,0.7));
			sb.drawnum(hpl.countinv("HDBallAmmo"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[MUSKT_BARREL]>=MUSKT_BALLLOADED)sb.drawrect(-21,-13,5,3);
		sb.drawwepnum(
			hpl.countinv("HDBallAmmo"),
			(HDCONST_MAXPOCKETSPACE/ENC_BALL)
		);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."+"..WEPHELP_ALTFIRE.."  load powder\n"
		..WEPHELP_RELOAD.."+"..WEPHELP_FIRE.."  load ball\n"
		..WEPHELP_ALTFIRE.."  Cock hammer\n"
		..WEPHELP_UNLOAD.."  Clear Barrel"
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,38,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*2;
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"musktsit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			owner.A_DropInventory("HDBallAmmo",1);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDBallAmmo",1);
	}
	
double strength;
	action void A_StrengthTics(int mintics,int maxtics=-1){
		if(invoker.strength==1.)return;
		if(maxtics<0)maxtics=tics;
		int ttt=min(maxtics,int(tics/invoker.strength));
		A_SetTics(max(mintics,int(ttt)));
	}

	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
		let hdp=hdplayerpawn(owner);
		strength=hdp?hdp.strength:1.;
		if(owner.countinv("HDZerk")>HDZerk.HDZERK_COOLOFF){
			strength*=1.2;
			if(!random[zrkbs](0,70)){
				static const string zrkbs[]={"kill","k i l l","k I L L","K\n   I\n       L\n          L","Kill.","KILL","k i l l","Kill!","K  I  L  L","kill...","Kill...","k i l l . . .","      kill","  ... kill ...","kill,","kiiiilllll!!!","kill~","kill <3","kill uwu"};
				hdp.usegametip("\cr"..zrkbs[random(0,zrkbs.size()-1)]);
			}
		}
	}

	action void HDStab(double dmg){ //SWAMPY DID THIS
		let punchrange=80.;//64 plu 16
		if(hdplayerpawn(self))punchrange*=hdplayerpawn(self).heightmult; //IDK how to feel about this height bullshit but whatever - Cozi

		flinetracedata punchline;
		bool punchy=linetrace(
			angle,punchrange,pitch,
			TRF_NOSKY,
			offsetz:height*0.77,
			data:punchline
		);
		if(!punchy)return;

		//actual puff effect if the shot connects
		LineAttack(
			angle,
			punchrange,
			pitch,
			punchline.hitline?(int(frandom(5,15)*invoker.strength)):0,
			"none",
			(invoker.strength>1.5)?"BulletPuffMedium":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height*0.78
		);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;


		//charge!
		dmg*=1.5;
		dmg += 1;
		//else dmg+=HDMath.TowardsEachOther(self,punchee)*3;

		//come in swinging
		let onr=hdplayerpawn(self);
		double velspd=onr.vel.length();/*
		double ptch=0.;
		double pyaw=0.;
		if(onr){
			ptch=deltaangle(onr.lastpitch,onr.pitch);
			pyaw=deltaangle(onr.lastangle,onr.angle);
			double iy=max(abs(ptch),abs(pyaw));
			if(pyaw<0)iy*=1.6;
			if(player.onground)dmg+=min(abs(iy)*5,dmg*3);
		}*/

		//shit happens
		dmg*=invoker.strength*velspd; //frandom(1.,1.2)


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			/*if(abs(pyaw)>(0.5)){
				punchee.A_SetAngle(clamp(normalize180(punchee.angle-pyaw*100),-50,50),SPF_INTERPOLATE);
			}
			if(abs(ptch)>(0.5*65535/360)){
				punchee.A_SetPitch(clamp((punchee.angle+ptch*100)%90,-30,30),SPF_INTERPOLATE);
			}*/
		}

		let hdmp=hdmobbase(punchee);

		//headshot lol
		if(
			!punchee.bnopain
			&&punchee.health>0
			&&(
				!hdmp
				||!hdmp.bheadless
			)
			&&punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			hdmobbase.forcepain(punchee);
			dmg*=frandom(1.1,1.8);
			if(hdmp)hdmp.stunned+=(int(dmg)>>2);
		}

		if(hd_debug)A_Log("Shanked "..punchee.getclassname().." for "..int(dmg).." damage!");

		bool puncheewasalive=!punchee.bcorpse&&punchee.health>0;

		if(dmg*2>punchee.health)punchee.A_StartSound("misc/bulletflesh",CHAN_AUTO);
		
		let aaa = HDFistPuncher(invoker.spawn("HDFistPuncher", invoker.pos));
		if(aaa)
		{
			aaa.master = invoker;
			punchee.damagemobj(aaa,self,int(dmg),"slashing");
 //bleed code borrowed from PBWeappns knife zscript
 //bonus points to BenitezClanceIV for suggesting it
if(!punchee.countinv("HDArmourWorn")){
	    HDBleedingWound.inflict(punchee,dmg*frandom(0.3,0.8));
    }

			aaa.destroy();
		}
		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
			if(
				(
					punchee.bismonster
					||!!punchee.player
				)
				&&countinv("HDZerk")>HDZerk.HDZERK_COOLOFF
			){
				if(
					punchee.bcorpse
					&&puncheewasalive
				){
					A_StartSound("weapons/zerkding2",CHAN_WEAPON,CHANF_OVERLAP|CHANF_LOCAL);
					givebody(10);
					if(onr){
						onr.fatigue-=onr.fatigue>>2;
						onr.usegametip("\cfK I L L !");
					}
				}else{
					A_StartSound("weapons/zerkding",CHAN_WEAPON,CHANF_OVERLAP|CHANF_LOCAL);
				}
			}
		}
	}///////////////////////////// END OF SWAMPY'S CODE - Cozi
	
		action void A_CockHammer(bool yes=true){
		if(yes){invoker.weaponstatus[MUSKT_COCKED]=2;A_StartSound("weapons/musketcock",8,CHANF_OVERLAP);}
		else invoker.weaponstatus[MUSKT_COCKED]=1;
	}
	
	states{
	select0:
		MSKG A 0; //A_Overlay(MUSKT_COCKED,"cocked");
		goto select0small;
	deselect0:
		MSKG A 0;
		goto deselect0small;
	ready:
		MSKG A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	
	//cocked:RVR1 A 1 wait;
	
	fire:
		MSKG A 1 offset(0,34){
				if(invoker.weaponstatus[MUSKT_COCKED]==1){
			setweaponstate("nope");
			return;
			}
				switch (invoker.weaponStatus[MUSKT_BARREL]){
					case MUSKT_CORRECTRAMMED:
					A_GunFlash();
					A_StartSound("weapons/musketfire",CHAN_WEAPON);
					A_AlertMonsters();
					let tb=HDBulletActor.FireBullet(self,"HDB_Ball",spread:4.,speedfactor:frandom(0.97,1.03));
					invoker.weaponstatus[MUSKT_BARREL]=0;
					invoker.weaponstatus[MUSKT_COCKED]=1;
					invoker.weaponstatus[MUSKT_HEAT]+=20;
					setweaponstate("nope"); //this makes sure you don't get double heat/smoke
					break;
				/////////////////////////////////////////////////////////////////////////////////////
					case MUSKT_OVERPOWDEREDRAMMED:
					A_GunFlash();
					A_StartSound("weapons/musketfire",CHAN_WEAPON);
					A_AlertMonsters();
					self.damagemobj(self,self,75,"slashing",DMG_NO_ARMOR);
					self.damagemobj(self,self,75,"hot",DMG_NO_ARMOR);
					spawn("HDExplosion",self.pos-(0,0,1),ALLOW_REPLACE);
					DistantQuaker.Quake(self,4,35,512,10);
					A_ChangeVelocity(cos(pitch)*-frandom(2,4),0,sin(pitch)*frandom(8,12),CVF_RELATIVE);
					A_MuzzleClimb(-frandom(4.,5.4),-frandom(3.4,5.2)); //doubled bc its too much lul
					A_StartSound("weapons/fgnclk",CHAN_WEAPON,CHANF_OVERLAP);
					A_SpawnItemEx("BigWallChunk",0,0,invoker.owner.height * 0.80, random(4,7),random(-2,2),random(-2,1),0,SXF_NOCHECKPOSITION);
					player.cmd.buttons|=BT_ZOOM;
					DropInventory(player.readyweapon);
					setweaponstate("nope"); //this makes sure you don't get double heat/smoke
					invoker.destroy();
					break;
				/////////////////////////////////////////////////////////////////////////////////////
					case MUSKT_OVERPOWDERED:
					case MUSKT_POWDERED:
					A_GunFlash();
					A_StartSound("weapons/musketfire",CHAN_WEAPON);
					A_AlertMonsters();
					A_MuzzleClimb(-frandom(4.,5.4),-frandom(3.4,5.2)); //doubled bc its too much lul
					A_StartSound("weapons/fgnclk",CHAN_WEAPON,CHANF_OVERLAP);
					invoker.weaponstatus[MUSKT_BARREL]=0;
					invoker.weaponstatus[MUSKT_COCKED]=1;
					invoker.weaponstatus[MUSKT_HEAT]+=20;
					setweaponstate("nope"); //this makes sure you don't get double heat/smoke
					break;
				/////////////////////////////////////////////////////////////////////////////////////
					case MUSKT_JUSTBALLRAMMED:
					A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
					A_SpawnItemEx("HDBallAmmo",0,0,invoker.owner.height * 0.80, 5,0,0,0,SXF_NOCHECKPOSITION);
					invoker.weaponstatus[MUSKT_BARREL]=0;
					invoker.weaponstatus[MUSKT_COCKED]=1;
					break;
				/////////////////////////////////////////////////////////////////////////////////////
				default:
				break;
				invoker.weaponstatus[MUSKT_BARREL]=0;
					};

		}
		MSKG B 2;
		goto nope;
		
	flash:
		MSKF A 1 bright{
			HDFlashAlpha(0,true);
			A_Light1();

			if(gunbraced())A_GiveInventory("IsMoving",2);
			else A_GiveInventory("IsMoving",7);
			if(!binvulnerable
				&&(
					countinv("IsMoving")>6
					||floorz<pos.z
				)
			){
				A_GiveInventory("IsMoving",5);
			}
		}
		MSKF B 1{
			A_ZoomRecoil(0.5);
			A_Light1();
		}
		TNT1 A 1 A_Light0();
		TNT1 A 0{
			int recoilside=randompick(-1,1);
			A_MuzzleClimb(
				0,0,
				-frandom(0.2,0.4),-frandom(0.6,1.),
				-frandom(0.4,0.7),-frandom(1.2,2.1),
				-frandom(0.4,0.7),-frandom(1.2,2.1)
			);
		}
		stop;
	reload: //Reload+Fire should put the ball in, Reload+Alt.Fire will pour powder in
		MSKR A 4 A_MuzzleClimb(
			-frandom(0.5,0.6),frandom(0.5,0.6),
			-frandom(0.5,0.6),frandom(0.5,0.6)
		);
		MSKR A 1 offset(1,34)A_StartSound("weapons/musketmove",8,CHANF_OVERLAP);
		MSKR B 3 offset(1,34);
		MSKR C 3 offset(1,34);
		MSKR D 3 offset(1,34);
		MSKR D 1 offset(2,44) A_SetTics(invoker.weaponstatus[MUSKT_HEAT]>>3);
		MSKR D 1 offset(3,42);
		goto reloadhold;
		
	reloadhold:
		MSKR D 1 offset(4,34) A_JumpIf(pressingfire(),"reloadball"); //past this point should probably be in a seperate thing
		MSKR D 0 offset(4,34) A_JumpIf(pressingaltfire(),"reloadpowder");
		MSKR D 0 offset(4,34) A_JumpIf(pressingreload(),"reloadhold");
		goto reloadend;

	reloadball: //puttin' da ball in.
		MSKR A 0 {if(!countinv("HDBallAmmo")){setweaponstate("reload");}}// uhhh idk probably add a delay or something
		MSKR DEFGH 5 offset(4,34);
		MSKR H 3 offset(0,34){
		switch (invoker.weaponStatus[MUSKT_BARREL]){
		case MUSKT_BALLLOADED:
		case MUSKT_CORRECTLOAD:
		A_WeaponMessage("\cgYou can't load two balls!",100);
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_POWDERED:
		A_TakeInventory("HDBallAmmo",1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_CORRECTLOAD;
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_OVERPOWDERED:
		A_TakeInventory("HDBallAmmo",1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_OVERPOWDEREDBALL;
		break;//////////////////////////////////////////////////////////////////
		default:
		A_TakeInventory("HDBallAmmo",1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_BALLLOADED;
		break;
		}}
		MSKR FED 5 offset(4,34);
		goto reloadhold;
		
	reloadpowder: //powderin' da toob.
		MSKR D 10 offset(4,34);
		MSKR D 3 offset(4,34) { switch (invoker.weaponStatus[MUSKT_BARREL]){
		case MUSKT_POWDERED:
		A_StartSound("weapons/musketdust",8,CHANF_OVERLAP);
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_OVERPOWDERED;
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_OVERPOWDERED:
		A_StartSound("weapons/musketdust",8,CHANF_OVERLAP);
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_OVERPOWDERED;
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_BALLLOADED:
		A_WeaponMessage("\cgThere's already a ball in!",100);
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_CORRECTLOAD:
		A_WeaponMessage("\cgYou already loaded this correctly!",100);
		break;//////////////////////////////////////////////////////////////////
		default:
		A_StartSound("weapons/musketdust",8,CHANF_OVERLAP);
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_POWDERED;
		break;//////////////////////////////////////////////////////////////////
		}}
		goto reloadhold;
		
	altreload: //this one's kinda clunky. oh well. - Cozi
		MSKR A 4 A_MuzzleClimb(
			-frandom(0.5,0.6),frandom(0.5,0.6),
			-frandom(0.5,0.6),frandom(0.5,0.6)
		);
		MSKR A 1 offset(1,34);
		MSKR B 3 offset(1,34);
		MSKR C 3 offset(1,34);
		MSKR D 3 offset(1,34);
		MSKR D 1 offset(2,44) A_SetTics(invoker.weaponstatus[MUSKT_HEAT]>>3);
		MSKR D 1 offset(3,42) A_StartSound("weapons/musketmove",8,CHANF_OVERLAP);
		goto altreloadhold;
		
	altreloadhold:
		MSKR F 1 offset(4,34) A_JumpIf(pressingfire(),"ramrod");
		MSKR F 0 offset(4,34) A_JumpIf(pressingaltreload(),"altreloadhold");
		goto reloadend;
		
	ramrod: //Locking in your answer
		MSKR I 10 offset(4,34);
		MSKR K 3 offset(-16,34) {
		A_StartSound("weapons/musketrodin",8,CHANF_OVERLAP);
		switch (invoker.weaponStatus[MUSKT_BARREL]){
		case MUSKT_CORRECTLOAD:
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_CORRECTRAMMED;
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_OVERPOWDEREDBALL:
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_OVERPOWDEREDRAMMED;
		break;//////////////////////////////////////////////////////////////////
		case MUSKT_BALLLOADED:
		invoker.WeaponStatus[MUSKT_BARREL]=MUSKT_JUSTBALLRAMMED;
		break;//////////////////////////////////////////////////////////////////
		}}
		MSKR M 3 offset(4,34);
		goto altreloadhold;

	unload:
		---- A 1 A_CheckChug(pressinguse()); //DO NOT set this frame to zero, also this is necessary for the round creation mechanic
		---- A 0 {A_MuzzleClimb(0,2);
		A_MuzzleClimb(
			frandom(-1.,1.),frandom(-1.,1.),
			frandom(-1.,1.),frandom(-1.,1.),
			frandom(-1.,1.),frandom(-1.,1.),
			frandom(-1.,1.),frandom(0.,1.));
			let failchance=40;
			let spareindex=-1;
			//if(spareindex==-1)spareindex=i;
			failchance=min(10,failchance-5);
			if(!random(0,failchance)){
			switch (invoker.weaponStatus[MUSKT_BARREL]){
				case MUSKT_POWDERED:
				A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
				//when powder is added it will go here
				invoker.weaponstatus[MUSKT_BARREL]=0;
				break;//////////////////////////////////////////////////////////////////
				case MUSKT_BALLLOADED:
				case MUSKT_JUSTBALLRAMMED:
				A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
				A_SpawnItemEx("HDBallAmmo",0,0,invoker.owner.height * 0.80, 5,0,-5,0,SXF_NOCHECKPOSITION);
				invoker.weaponstatus[MUSKT_BARREL]=0;
				break;//////////////////////////////////////////////////////////////////
				case MUSKT_CORRECTLOAD:
				case MUSKT_CORRECTRAMMED:
				A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
				A_SpawnItemEx("HDBallAmmo",0,0,invoker.owner.height * 0.80, 5,0,-5,0,SXF_NOCHECKPOSITION);
				//when powder is added it will go here
				invoker.weaponstatus[MUSKT_BARREL]=0;
				break;//////////////////////////////////////////////////////////////////
				case MUSKT_OVERPOWDERED:
				A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
				//when powder is added it will go here, will need a counting measure
				invoker.weaponstatus[MUSKT_BARREL]=0;
				break;//////////////////////////////////////////////////////////////////
				case MUSKT_OVERPOWDEREDBALL:
				case MUSKT_OVERPOWDEREDRAMMED:
				A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
				A_SpawnItemEx("HDBallAmmo",0,0,invoker.owner.height * 0.80, 5,0,-5,0,SXF_NOCHECKPOSITION);
				//when powder is added it will go here
				invoker.weaponstatus[MUSKT_BARREL]=0;
				break;//////////////////////////////////////////////////////////////////
				default:
				break;//////////////////////////////////////////////////////////////////
			}}}
		/*
	MUSKT_POWDERED=1,
	MUSKT_BALLLOADED=2,
	///////////////////////////////
	MUSKT_CORRECTLOAD=4,
	MUSKT_CORRECTRAMMED=5,
	///////////////////////////////
	MUSKT_OVERPOWDERED=6,
	MUSKT_OVERPOWDEREDBALL=7,
	MUSKT_OVERPOWDEREDRAMMED=8,
	///////////////////////////////
	MUSKT_JUSTBALLRAMMED=9,
	///////////////////////////////
		*/
		goto ready;

	altfire:
	---- A 0 A_JumpIf(invoker.weaponstatus[MUSKT_COCKED]==2,"uncock");
	MSKG A 1 A_CockHammer;
	MSKR A 5 offset(0,34); // A_Refire()
	goto ready;

	uncock:
	MSKR A 1 offset(0,38);
	MSKR A 1 offset(0,34);
	MSKR A 2 offset(0,36) A_StartSound("weapons/deinocyl",8,CHANF_OVERLAP);
	MSKR A 0 A_CockHammer(false);
	goto nope;

	reloadend:
		MSKG B 1 offset(0,48);
		MSKG B 1 offset(0,44);
		MSKG B 1 offset(0,36);
		MSKG B 1 offset(0,33);
		MSKG BA 2 offset(0,34);
		MSKG A 0 A_JumpIf(pressingunload(),"nope");
		goto ready;

	spawn:
		MSKT A -1 {
				if(
				invoker.makinground
				&&invoker.shells>=4
			)setstatelabel("chug");}
		stop;
	
	firemode: //this is from swampy, ty swampy - Cozi
		MSKB A 1;// A_DontFreedoomFrameB();
		MSKB A 1 A_JumpIf(pressingfiremode(),"firemode");//adds a windup bedore stabbing
		MSKB B 3 {A_StrengthTics(0,2); A_Recoil(-1);}// adds a short charge before stabbing
		MSKB B 0 A_Recoil(min(0,1.-invoker.strength));
		MSKB B 0 HDStab(20);
		MSKB B 4 A_StrengthTics(3,10);
		MSKB B 2 A_StrengthTics(1,5);
		//#### B 0 A_DontFreedoomFrameB();
		MSKB A 3 A_StrengthTics(0,5);
		MSKB A 0 A_JumpIf(pressingfiremode(),"firemode");
		MSKB A 1 A_ReFire();
		goto ready;


	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[MUSKT_BARREL]=MUSKT_CORRECTRAMMED; //if any weird shit happens later delete this probably
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[MUSKT_HEAT]=0;
		}
	}
	//override void loadoutconfigure(string input){
	//}
	//for smoking barrels
	void drainheat(
		int ref,
		int smklength=18,
		double smkscale=1.,  //set to zero for no smoke at all
		double smkspeed=3.,
		double smkstartalpha=2.
	){
		if(isfrozen())return;
		if(weaponstatus[ref]>0){
			weaponstatus[ref]--;
			if(
				smkscale<=0
				||random(1,10)>weaponstatus[ref]
			)return;
			vector3 smkpos=pos;
			vector3 smkvel=vel;
			vector3 smkdir=(0,0,0);
			double smkang=angle;
			double smkpitch=pitch;
			if(owner){
				smkpos=owner.pos;
				if(
					!owner.player
					||owner.player.readyweapon==self
				){
					//spawn smoke from muzzle
					actor sccam;
					if(
						hdplayerpawn(owner)
						&&hdplayerpawn(owner).scopecamera
					)sccam=hdplayerpawn(owner).scopecamera;
					else sccam=owner;
					smkang=sccam.angle;smkpitch=sccam.pitch;
					smkdir=(cos(sccam.pitch)*(cos(smkang),sin(smkang)),-sin(sccam.pitch));
					smkpos.z=sccam.pos.z-4+smkdir.z*smklength;
					smkpos.xy+=smklength*smkdir.xy;
				}else{
					//spawn smoke from behind owner
					smkang=owner.angle;
					smkpos.z+=owner.height*0.6;
					smkpos.xy-=10*(cos(smkang),sin(smkang));
				}
				smkvel=owner.vel;
				smkpos-=smkvel;
			}
			if(!smkstartalpha)smkstartalpha=getdefaultbytype("HDBlackpowderGunSmoke").alpha;
			actor a=spawn("HDBlackpowderGunSmoke",smkpos,ALLOW_REPLACE);
			smkvel*=0.4;
			smkdir*=smkspeed;
			smkvel+=smkdir;
			a.angle=smkang;a.pitch=smkpitch;a.vel=smkvel;a.scale*=smkscale;a.alpha=smkstartalpha;
			for(int i=30;i<weaponstatus[ref];i+=30){
				if(!random(0,3)){
					a=spawn("HDBlackpowderGunSmoke",smkpos,ALLOW_REPLACE);
					a.angle=smkang;a.pitch=smkpitch;
					a.scale*=smkscale;a.alpha=smkstartalpha;
					a.vel=smkvel+(frandom(-2,2),frandom(-2,2),frandom(-2,2));
				}
			}
		}
		//also deal with spares, no smoke because lazy
		if(owner){
			let spw=spareweapons(owner.findinventory("spareweapons"));
			if(spw){
				string gcn=getclassname();
				for(int i=0;i<spw.weapontype.size();i++){
					if(spw.weapontype[i]==gcn){
						array<string> wepstat;
						spw.weaponstatus[i].split(wepstat,",");
						if(wepstat[ref].toint()>0)wepstat[ref]=""..(wepstat[ref].toint()-1);
						string newwepstat="";
						for(int j=0;j<wepstat.size();j++){
							if(j)newwepstat=newwepstat..",";
							newwepstat=newwepstat..wepstat[j];
						}
						spw.weaponstatus[i]=newwepstat;
					}
				}
			}
		}
	}
}

class HDBlackpowderGunSmoke:HDSmoke{
    default{
        scale 0.1;renderstyle "add";alpha 0.05; //was 0.4
        hdpuff.decel 0.87; //was 0.97
        hdpuff.fade 0.95; //was 0.8
        hdpuff.grow 1.85; //was 0.06
        hdpuff.minalpha 0.01;
        hdpuff.startvelz 0;
    }
    override void postbeginplay(){
        super.postbeginplay();
		weaponspecial = 1337; // [Ace] UaS sling compatibility. [Cozi] yo mama.
        a_changevelocity(cos(pitch)*4,0,-sin(pitch)*4,CVF_RELATIVE);
        vel+=(frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(0.4,0.9));
    }
}

enum musketstatus{
	MUSKT_POWDERED=1,
	MUSKT_BALLLOADED=2,
	///////////////////////////////
	MUSKT_CORRECTLOAD=3,
	MUSKT_CORRECTRAMMED=4,
	///////////////////////////////
	MUSKT_OVERPOWDERED=5,
	MUSKT_OVERPOWDEREDBALL=6,
	MUSKT_OVERPOWDEREDRAMMED=7,
	///////////////////////////////
	MUSKT_JUSTBALLRAMMED=8,
	///////////////////////////////
	
	MUSKT_COCKED=2,
	
	MUSKT_BARREL=1,//this is the barrel
	MUSKT_JUSTUNLOAD=32,//this one will be 7
	
	MUSKT_HEAT=0,
};

class HD_MusketDropper:IdleDummy{
    states{
    spawn:
        TNT1 A 0 nodelay{
			A_SpawnItemEx("HDLooseBall",frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HDLooseBall",frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HDLooseBall",frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HDLooseBall",frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HDLooseBall",frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("HD_Musket",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
        }stop;
    }
}